import subprocess
import datetime
import os
import csv
import argparse

date = datetime.date.today()
TODAY_DATE = f"{date.month}.{date.day}"

device = '/dev/sda'  # Example Drive Nomenclature
testSize = '10GB' # Default Value, can be set with args
# blocksize = {'1k_test': '1k', '2k_test': '2k', '4k_test': '4k', '128k_test': '128k',
#              '256k_test': '256k', '512k_test': '512k', '1M_test': '1M', '4M_test': '4M'}
blocksize = {'1M_test': '1M', '4M_test': '4M'} # Example Blocksize Input
output_folder = f"{TODAY_DATE}" #Just the folder, file names are generated by test type
jobs=1 # default value, can be set with args
test_type="write" # default value, can be set with args
results_list = []


def fio_test_size(blocksize, testSize, device, test_type, jobs, output_folder):
  
    ensure_dir(output_folder) # create folder for output files and CSV if requested

    for name, size in blocksize.items():
        command = f"fio --randrepeat=1 --ioengine=libaio --invalidate=1 --direct=1 --name={TODAY_DATE}_{name} --filename={device} --bs={size} --iodepth=32 --size={testSize} --readwrite={test_type} --numjobs={jobs} --group_reporting | tee {output_folder}/{name}_{size}.txt"
        output = subprocess.check_output(command, shell=True)

        outputList = output.decode('utf-8').split('\n')
        writeString = outputList[-5].split(' ')
        iops_string = outputList[5].lstrip().split(' ')
        slat_string = outputList[6].lstrip().split(' ')
        clat_string = outputList[7].lstrip().split(' ')
        lat_string = outputList[8].lstrip().split(' ')
        rawBW = ''.join(val for val in writeString[4] if val.isdigit())
        rawIOPs = ''.join(val for val in iops_string[2] if val.isdigit())
        slat_raw = slat_string[4][4:-1]
        clat_raw = clat_string[4][4:-1]
        lat_raw = lat_string[4][4:-1]
        slat_unit = slat_string[1][1:-2]
        clat_unit = clat_string[1][1:-2]
        lat_unit = lat_string[1][1:-2]
        print(f"{name} using {device}")
        print(f"{iops_string[2]} {rawIOPs} {slat_raw}{slat_unit} {clat_raw}{clat_unit} {lat_raw}{lat_unit}")
        results_list.append({'Bandwidth': iops_string[2],'IOPS':rawIOPs,'Slat Value': slat_raw, 'Slat Unit': slat_unit, 
                             'Clat Value': clat_raw,'Clat Unit': clat_unit, 'Lat Value': lat_raw,'Lat Unit':lat_unit})


def convert_to_csv(conversion_list):

    # Create Header for easy sorting
    csv_columns = ['Bandwidth','IOPS','Slat Value','Slat Unit','Clat Value','Clat Unit', 'Lat Value','Lat Unit']
    csv_file = f"{output_folder}/{TODAY_DATE}_FIO.csv"

    # Write Results into CSV
    with open(csv_file,'w') as fio_write:
        fio_data = csv.DictWriter(fio_write, fieldnames=csv_columns)
        fio_data.writeheader()
        for data in conversion_list:
            fio_data.writerow(data)
        fio_write.close()

def ensure_dir(file_path):
    
    dir = os.path.dirname(file_path)
    if not os.path.exists(dir):
        os.mkdir(file_path)

arg_parser = argparse.ArgumentParser()

arg_parser.add_argument('-d','--drives', action='store', dest='drives')
arg_parser.add_argument('-s','--size', action='store', dest='test_size')
arg_parser.add_argument('-rw','--readwrite', action='store', dest='test_type')
arg_parser.add_argument('-n','--numjobs', action='store', dest='num_jobs')
arg_parser.add_argument('-o', '--output', action='store', dest='output_file')
arg_parser.add_argument('-c','--csv', action='store_true')

args = arg_parser.parse_args()

if args.drives:
    device = args.drives
if args.test_size:
    testSize = args.test_size
if args.output_file:
    output_folder = args.output_file
if args.num_jobs:
    jobs = args.num_jobs
if args.test_type:
    test_type = args.test_type

fio_test_size(blocksize, testSize, device, test_type, jobs, output_folder)

if args.csv:
    convert_to_csv(results_list)

